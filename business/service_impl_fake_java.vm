/*
 * Created on $today.date ( Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 */
##--------------------------------------------------------------------------------------------------------
#set( $tools = $loader.newInstance("Tools") )
#set( $fake = $loader.newInstance("Fake") )
#set( $uncapitalizedEntityName = $tools.uncapitalize($entity.name) )
##--------------------------------------------------------------------------------------------------------
package ${target.javaPackageFromFolder(${SRC})};

import java.util.Hashtable;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import ${ENTITY_PKG}.${entity.name};
#foreach( $import in $java.imports($entity) )
import $import;
#end
import ${ROOT_PKG}.business.service.${entity.name}Service;
import ${ROOT_PKG}.business.service.impl.fake.${entity.name}ServiceImplFake;
import org.springframework.stereotype.Component;

/**
 * Fake implementation for ${entity.name}Service
 *
 */
@Component
public class ${entity.name}ServiceImplFake implements ${entity.name}Service {

	private static Hashtable<String,${entity.name}> records = null ;
	
	public ${entity.name}ServiceImplFake() {
		super();
		if ( records == null ) {
			records = new Hashtable<String,${entity.name}>();
			initRecords(20);
		}
	}

	private String pkString( $fn.argumentsListWithType($entity.keyAttributes) ) {
		StringBuilder sb = new StringBuilder();
#foreach( $attribute in $entity.keyAttributes )
#if ( $foreach.count > 1 )
		sb.append("-");
#end
		sb.append($attribute.name);
#end
		return sb.toString();
	}
	
	private void initRecords(int numberOfRecords) {
		for ( int i = 1 ; i <= numberOfRecords ; i++ ) {
			//--- New instance 
			${entity.name} ${uncapitalizedEntityName} = new ${entity.name}() ;
			//--- Primary Key attributes
#foreach( $attribute in $entity.keyAttributes )
			${uncapitalizedEntityName}.${attribute.setter}( $fake.getFakeValue($attribute, "i") ) ;
#end
			//--- Non Primary Key attributes
#foreach( $attribute in $entity.nonKeyAttributes )
			${uncapitalizedEntityName}.${attribute.setter}( $fake.getFakeValue($attribute, "i") ) ;
#end
			
			//--- Add in the records pseudo table
			String key = pkString( $fn.argumentsListWithGetter(${uncapitalizedEntityName}, $entity.keyAttributes) );
			records.put(key, ${uncapitalizedEntityName});
		}
	}
//-----------------------------------------------------------
#* 
	@Override
	public List<${entity.name}> findAll() {
		// Fake : returns a list of instances
		List<${entity.name}> list = new LinkedList<${entity.name}>();
		for ( int i = 1 ; i <= 20 ; i++ ) {
			${entity.name} ${uncapitalizedEntityName} = new ${entity.name}() ;

			//--- Primary Key attributes
#foreach( $attribute in $entity.keyAttributes )
			${uncapitalizedEntityName}.${attribute.setter}( $fake.getFakeValue($attribute) ) ;
#end

			//--- Non Primary Key attributes
#foreach( $attribute in $entity.nonKeyAttributes )
			${uncapitalizedEntityName}.${attribute.setter}( $fake.getFakeValue($attribute) ) ;
#end

			list.add(${uncapitalizedEntityName});
		}
		return list ;
	}
*#
//-----------------------------------------------------------
	@Override
	public ${entity.name} findById($fn.argumentsListWithType($entity.keyAttributes)) {
		String key = pkString( $fn.argumentsList($entity.keyAttributes) );
		${entity.name} ${uncapitalizedEntityName} = records.get(key);
		return ${uncapitalizedEntityName};
	}

	@Override
	public List<${entity.name}> findAll() {
		List<${entity.name}> list = new LinkedList<${entity.name}>();
		for( Map.Entry<String, ${entity.name}> entry : records.entrySet() ) {
			${entity.name} ${uncapitalizedEntityName} = entry.getValue();
			list.add(${uncapitalizedEntityName});
		}
		return list ;
	}

	@Override
	public ${entity.name} save(${entity.name} ${uncapitalizedEntityName}) {
		return update(${uncapitalizedEntityName}) ;
	}

	@Override
	public ${entity.name} create(${entity.name} ${uncapitalizedEntityName}) {
		String key = pkString( $fn.argumentsListWithGetter(${uncapitalizedEntityName}, $entity.keyAttributes) );
		if ( records.get(key) != null ) {
			throw new RuntimeException("Duplicated key '" + key + "'. ${entity.name} already exists");
		}
		records.put(key, ${uncapitalizedEntityName});
		return ${uncapitalizedEntityName};
	}

	@Override
	public ${entity.name} update(${entity.name} ${uncapitalizedEntityName}) {
		String key = pkString( $fn.argumentsListWithGetter(${uncapitalizedEntityName}, $entity.keyAttributes) );
		records.put(key, ${uncapitalizedEntityName});
		return ${uncapitalizedEntityName};
	}

	@Override
	public void delete( $fn.argumentsListWithType($entity.keyAttributes) ) {
		String key = pkString( $fn.argumentsList($entity.keyAttributes) );
		records.remove(key);
	}

}
